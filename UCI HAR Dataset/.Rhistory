gc()
install.packages("tidyverse")
install.packages("readxl")
library(readxl)
install.packages("data.table")
install.packages(jsonlite)
install.packages("jsonlite")
library("jsonlite")
library(jsonlite)
getwd()
library(jsonlite)
jsonData<-fromJSON("https://api.github.com/users/jtleek/repos")
names(jsonData)
names(jsonData$owner)
myjson<-toJSON(iris,pretty = TRUE)
cat(myjson)
iris2<-fromJSON(myjson)
head(iris2)
library(jsonlite)
library(httr)
data1<-fromJSON("https://api.github.com/users/hadley/orgs")
names(data1)
data1$login
data2<-fromJSON("https://api.github.com/users/hadley/repos")
names(data2)
data2$name
data2$owner$login
data2[1,]$owner$login
data2[1,"owner"]$login
data2$owner[1,"login"]
data2$owner[1,]$login
library(data.table)
install.packages("data.table")
install.packages("data.table")
library(data.table)
install.packages("RMySQL")
library("swirl")
ls()
rm(list = ls())
swirl()
read.csv(path2csv, stringsAsFactors = FALSE)
mydf<-read.csv(path2csv,stringsAsFactors = FALSE)
dim()
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran<-tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
print(cran)
cran
select(cran, -time)
-5:20
-(5:20)
select(-5:20)
select(cran, 5:20)
select(cran, -x:20)
select(cran, -(X:size))
filter(cran, package=="swirl")
filter(cran, r_version== "3.1.1", country == "US")
?Comparison
filter(cran, r_version<= "3.0.2", country == "US")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size> 100500, r_os equals == "linux-gnu")
filter(cran, size> 100500, r_os equals == linux-gnu)
filter(cran, size> 100500, r_os equals = linux-gnu)
filter(cran, size > 100500, r_os == linux-gnu)
filter(cran, size > 100500, r_os == "linux-gnu"")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(R.version))
filter(cran, !is.na(r_version)
filter(cran, !is.na(r_version))
cran2<-select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2,package,ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3<-select(cran, ip_id,package,size)
cran3
mutate(cran3, size_mb = size/ 2^20)
mutate(cran3, size_mb = size/ 2^20, size_gb==size_mb/2^10)
mutate(cran3, size_mb = size/ 2^20, size_gb==size_mb/2^10)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size=size+1000)
summarize(cran, avg_bytes=mean(size))
library(dplyr)
cran<-tbl_df(data frame tbl)
cran<-tbl_df(mydf)
rm("mydf")
cran
?group_by\
?group_by
by_package<-group_by(cran,package)
by_package
summarize(by_package, mean(size))
submit()
reset()
swirl()
submit()
source('C:/Users/ENTENG~1/AppData/Local/Temp/RtmpsDCWHB/summarize1.R')
source('C:/Users/ENTENG~1/AppData/Local/Temp/RtmpsDCWHB/summarize1.R')
submit()
reset()
swirl()
submit()
reset()
swirl()
submit
submit()
reset()
swirl()
reset()
swirl()
source('C:/Users/ENTENG~1/AppData/Local/Temp/RtmpsDCWHB/summarize1.R')
submit()
reset()
swirl()
source('C:/Users/ENTENG~1/AppData/Local/Temp/RtmpsDCWHB/summarize1.R')
submit()
pack_sum
quantile
quantile(pack_sum$count, probs = 0.99)
top_counts<-filter(pack_sum$count>679)
top_counts<-filter(pack_sum,count>679)
top_counts
View(top_counts)
top_counts_sorted<-arrange(top_counts,desc(count))
View()
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique<-filter(pack_sum,unique())
top_unique<-filter(pack_sum,unique)
top_unique<-filter(pack_sum,unique>465)
View(top_unique)
top_unique_sorted<-arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res<-gather(students2, sex_class, value)
res<-gather(students2, sex_class, count, -grade)
res
?separate
separate(data=res, col=sex_class, into = c("sex", "class"))
submit()
submit()
students3
submit()
spread(students3)
spread()
?spread
submit()
submit()
library(readr)
parse_number("class5")
submit()
submit()
submit()
students4
submit()
submit()
submi()
submit()
submit()
submit()
passed
failed
mutate(status, passed)
passed<-passed %>% mutate(status="passed")
failed<-failed %>% mutate(status="failed")
?bind_rows
bind_rows(passed,failed)
sat
submit()
submit()
submit()
Sys.getlocale()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package=lubridate)
this_day<-today()
this_day
year(this_day)
wday(this_day)
wday(this_day=TRUE)
wday(this_day, label = TRUE)
this_moment<-now()
this_moment
minute(this_moment)
my_date<-ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
ymd("March 12, 1975")
mdy("March 12, 1975")
dmy("25081985")
dmy(25081985)
ymd("192012")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours=8, minutes=34, seconds=55)
this_moment
this_moment<-update(this_moment)
this_moment<-update(this_moment, hours=10, minutes=16, seconds=0)
this_moment
now("America/New_York")
nyc<-now("America/New_York")
nyc
depart<-nyc+days(2)
depart
update(depart)
depart<-update(depart, hours=17, minutes=34)
depart
ncy+days(2)
arrive<-nyc+days(2)
arrive<-depart + hours(15) + minutes (50)
?with_tz
arrive<-with_tz("Asia/Hong_Kong")
arrive<-with_tz(arrive, "Asia/Hong_Kong")
arrive
last_time<-mdy("June 17, 2008", tz="Singapore")
last_time
interval(last_time)
interval(arrive, last_time)
?interval
how_long<-interval(last_time, arrive)
as.period(how_long)
stopwatch()
q()
ls()
library("data.table")
communities<-data.table::fread("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv")
varNamesSplit<-strsplit(names(communities),"wgtp")
varNamesSplit[[123]]
GDPrank<-data.table::fread('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv')
GDPrank <- data.table::fread('http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv'
, skip=5
, nrows=190
, select = c(1, 2, 4, 5)
, col.names=c("CountryCode", "Rank", "Country", "GDP")
)
GDPrank[,mean(as.integer(gsub(pattern = ',',replacement = ' ', x = GDPrank)))]
library(quantlod)
library(quantmod)
install.packages("quantmod")
library("quantmod")
amzn<-getSymbols("AMZN", auto.assign = FALSE)
source('C:/Users/enteng007/datasciencecoursera/Module_3_Getting_and_Cleaning_Data/UCI HAR Dataset/run_analysis.R')
# Extract the value on the mean and standard deviation for each data.
X_train = X_train[,extract_features]
setwd("C:/Users/enteng007/datasciencecoursera/Module_3_Getting_and_Cleaning_Data/UCI HAR Dataset")
getwd()
source("run_analysis.R")
